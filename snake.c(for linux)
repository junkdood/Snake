#include <stdio.h>
#include <string.h>
#include <sys/time.h>
#include <sys/types.h>
#include <unistd.h>
#include <termios.h>
#include <unistd.h>
#define head 'H'
#define body 'X'
#define wall '*'
#define nothing ' '
#define food '$'
#define nail '+'
#define mapx 22
#define mapy 42
#define win 100


static struct termios ori_attr, cur_attr;

static __inline 
int tty_reset(void)
{
        if (tcsetattr(STDIN_FILENO, TCSANOW, &ori_attr) != 0)
                return -1;

        return 0;
}


static __inline
int tty_set(void)
{
        
        if ( tcgetattr(STDIN_FILENO, &ori_attr) )
                return -1;
        
        memcpy(&cur_attr, &ori_attr, sizeof(cur_attr) );
        cur_attr.c_lflag &= ~ICANON;
        cur_attr.c_lflag &= ~ECHO;
        cur_attr.c_cc[VMIN] = 1;
        cur_attr.c_cc[VTIME] = 0;

        if (tcsetattr(STDIN_FILENO, TCSANOW, &cur_attr) != 0)
                return -1;

        return 0;
}

static __inline
int kbhit(void) 
{
                   
        fd_set rfds;
        struct timeval tv;
        int retval;

        FD_ZERO(&rfds);
        FD_SET(0, &rfds);
        tv.tv_sec  = 0;
        tv.tv_usec = 0;

        retval = select(1, &rfds, NULL, NULL, &tv);

        if (retval == -1) {
                perror("select()");
                return 0;
        } else if (retval)
                return 1;
        else
                return 0;
        return 0;
}

int size=7;
int org;
int hard;

typedef struct snake{
	int x,y;
	struct snake* next;
}snake;

int de=0;
snake* first;

int creat(char* a){
	if(size>mapy-2||size<2)return 0;
	int i;
	snake* l;
	first=(snake*)malloc(sizeof(snake));
	first->x=1;
	first->y=size;
	l=first;
	*(a+first->x*(mapy+1)+first->y)=head;
	for(i=1;i<size;i++){
		snake* r=(snake*)malloc(sizeof(snake));
		r->x=1;
		r->y=size-i;
		*(a+r->x*(mapy+1)+r->y)=body;
		l->next=r;
		l=r;
	}
	*(a+l->x*(mapy+1)+l->y)=nail;
	l->next=NULL;
	return 1;
}

int creatf(char* a){
	int x,y;
	do{
		x=rand()%mapx;
		y=rand()%mapy;
	}while(*(a+x*(mapy+1)+y)!=' '&&size<100);
	*(a+x*(mapy+1)+y)=food;
	return 0;
}

int analize(char move,char* a){
	int i;
	snake* l=(snake*)malloc(sizeof(snake));
	l->next=first;
	first=l;
	l=l->next;
	if(move=='w'){
		first->x=(l->x-1+mapx)%mapx;
		first->y=l->y;
	}
	else if(move=='s'){
		first->x=(l->x+1+mapx)%mapx;
		first->y=l->y;
	}
	else if(move=='a'){
		first->x=l->x;
		first->y=(l->y-1+mapy)%mapy;
	}
	else if(move=='d'){
		first->x=l->x;
		first->y=(l->y+1+mapy)%mapy;
	}
	if(*(a+first->x*(mapy+1)+first->y)==nothing){
		*(a+first->x*(mapy+1)+first->y)=head;
		for(i=1;i<size-1;i++){
			*(a+l->x*(mapy+1)+l->y)=body;
			l=l->next;
		}
		*(a+l->x*(mapy+1)+l->y)=nail;
		l=l->next;
		*(a+l->x*(mapy+1)+l->y)=nothing;
		free(l->next);
		l->next=NULL;
		return 1;
	}
	else if(*(a+first->x*(mapy+1)+first->y)==nail){
		*(a+first->x*(mapy+1)+first->y)=head;
		for(i=1;i<size-1;i++){
			*(a+l->x*(mapy+1)+l->y)=body;
			l=l->next;
		}
		*(a+l->x*(mapy+1)+l->y)=nail;
		l=l->next;
		*(a+l->x*(mapy+1)+l->y)=head;
		free(l->next);
		l->next=NULL;
		return 1;
	}
	else if(*(a+first->x*(mapy+1)+first->y)==food){
		*(a+first->x*(mapy+1)+first->y)=head;
		size++;
		for(i=1;i<size-1;i++){
			*(a+l->x*(mapy+1)+l->y)=body;
			l=l->next;
		}
		*(a+l->x*(mapy+1)+l->y)=nail;
		l->next=NULL;
		creatf(a);
		return 1;
	}
	else return 0;
}



void out(char* a){
	int i,r;
	for(i=0;i<mapx;i++){
		for(r=0;r<mapy;r++){
			printf("%c",*(a+i*(mapy+1)+r));
		}
		printf("\n");
	}
}

void clearr(){
	snake* temp;
	while(first!=NULL){
		temp=first;
		first=first->next;
		free(temp);
	}
}

int main(){
	int tty_set_flag;
        tty_set_flag = tty_set();
	org=size;
	char dee,deee;
	while(1){
		size=org;
		char move='d',temp='d';
		char a[mapx][(mapy+1)]={
		"*   **************      **************   *",
		"                                          ",
		"        ******              ******        ",
		"                                          ",
		"*   ***        ***      ***        ***   *",
		"*   *            *      *            *   *",
		"*   *            *      *            *   *",
		"*   ***        ***      ***        ***   *",
		"                                          ",
		"        ******              ******        ",
		"                                          ",
		"                                          ",
		"        ******              ******        ",
		"                                          ",
		"*   ***        ***      ***        ***   *",
		"*   *            *      *            *   *",
		"*   *            *      *            *   *",
		"*   ***        ***      ***        ***   *",
		"                                          ",
		"        ******              ******        ",
		"                                          ",
		"*   **************      **************   *",
		};
		if(!(creat(a))){
			printf("Creat fail\n");
			return 0;
		}
		printf("eat food($) to grow\ndon't hit wall(*) or eat yourself(X)\nyou will WIN when you grow to %d long\n\n'a'for hard  'b'for middle  'c'for easy\n",win);
		while(1){
			scanf("%c",&deee);
			if(deee=='a'){
				hard=100000;
				break;
			}
			else if(deee=='b'){
				hard=200000;
				break;
			}
			else if(deee=='c'){
				hard=400000;
				break;
			}
			printf("\nYou press a wrong letter\nplease enter again:");
		}
		system("clear");
		creatf(a);
		out(a);
		while(1){
			if(size==win){
				printf("WoW\nyou are great\n");
				fgetc(stdin);
				system("clear");
				printf("You WIN\nscore is %d\nPress r to restar\nPress other letter to quit\n",size-org);
				break;
			}
			usleep (hard);
			if(kbhit()){
				temp=getchar(); 
			}
			if(temp=='q'){
				printf("Pause\npress any letter to go on\n");
				fgetc(stdin);
			}
			if((temp!='w'&&temp!='s'&&temp!='a'&&temp!='d')||(move=='w'&&temp=='s')||(move=='s'&&temp=='w')||(move=='a'&&temp=='d')||(move=='d'&&temp=='a')){
				temp=move;
				continue;
			}
			if(temp=='q'){
				printf("Pause\npress any letter to go on\n");
				fgetc(stdin);
				continue;
			}
			move=temp;
			if(analize(move,a)==1){
				system("clear");
				out(a);
			}
			else{
				printf("You fail\npress any letter to go on\n");
				fgetc(stdin);
				system("clear");
				printf("You fail\nscore is %d\nPress r to restar\nPress q letter to quit\n",size-org);
				break;
			}
		}
		clearr();
		while(1){
			scanf("%c",&dee);
			if(dee=='r'){
				break;
			}
			else if(dee=='q'){
				if(tty_set_flag == 0) 
                			tty_reset();
				return 0;
			}
			printf("You press a wrong letter\nplease enter again:\n");
		}
		system("clear");
	}
	return 0;
}
